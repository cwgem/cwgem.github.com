Git Rebase Fixing
=================
Chris White<cwhite@engineyard.com>
v1.0, Tue Feb 19 PST 2013

link:/[Home]

WARNING: This article utilizes `git push --force` which I've link:/git/git-force.html[discussed the use case of], so please make sure and read it to understand why I'm making an exception

Introduction
~~~~~~~~~~~~

`git rebase` is a feature that can be frightening at times for having the ability to rewrite history. In the worst case contributers will have history conflicts to deal with and may become quite irritated. However, rebasing can provide a quick an easy way to cleanup commits before pushing them to others. This case however will look into a remote branch which is a GitHub fork. This fork is solely meant for providing fixes which get pushed to the https://github.com/wayneeseguin/rvm[main RVM repository]. 

Woops...
~~~~~~~~

So right now there's a fix I made for a bug in RVM that I'm about to put in a pull request for. So now I'll fake a mistake and commit it:

[source,console]
----
$ vim scripts/cli 
$ git add scripts/cli 
$ git commit -m "This is a mistake"
[ruby-reinstall 618f439] This is a mistake
$ git push origin ruby-reinstall
Counting objects: 7, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 364 bytes, done.
Total 4 (delta 3), reused 0 (delta 0)
To git@github.com:cwgem/rvm.git
   4994dd5..618f439  ruby-reinstall -> ruby-reinstall
----

Now it's not only committed, but also pushed to the remote repository (which is once again an exclusive use fork). While looking over the pull request I notice my horrible error. On top of that I look at the commit message and realize that I forgot to include the issue number. Fortunately this can be fixed.

Git Magic
~~~~~~~~~

The first order of business is reverting the mistake:

[source,console]
----
$ git revert 618f4398bfeea938a1b9878b9fcf419b94d85e6c
[ruby-reinstall 67b8cf6] Revert "This is a mistake"
 1 file changed, 1 insertion(+)
----

But now looking at the logs:

[source,text]
----
$ git log
commit 67b8cf6de9fc6b7cb53c793f6826fee3a203a2fc
Author: Chris White <cwhite@engineyard.com>
Date:   Tue Feb 19 20:55:05 2013 -0800

    Revert "This is a mistake"
    
    This reverts commit 618f4398bfeea938a1b9878b9fcf419b94d85e6c.

commit 618f4398bfeea938a1b9878b9fcf419b94d85e6c
Author: Chris White <cwhite@engineyard.com>
Date:   Tue Feb 19 20:09:29 2013 -0800

    This is a mistake

commit 4994dd5b0a8c483a44e22ce554e09da5eb14ae5e
Author: Chris White <cwhite@engineyard.com>
Date:   Tue Feb 19 19:54:54 2013 -0800

    Fixed rvm reinstall/remove ruby not working properly
----

This would be annoying for the person on the other side of the pull request to review. That's where `git rebase` comes in handy. In this case `git rebase` will be started by what's called interactive mode. Interactive mode uses `$EDITOR` to handle history adjustments:

[source,console]
$ git rebase -i HEAD~3 # work with all commits starting from 3 commits up to HEAD

[source,text]
----
pick 4994dd5 Fixed rvm reinstall/remove ruby not working properly
pick 618f439 This is a mistake
pick 67b8cf6 Revert "This is a mistake"

# Rebase 39d46f9..67b8cf6 onto 39d46f9
#
# Commands:
#  p, pick = use commit
#  r, reword = use commit, but edit the commit message
#  e, edit = use commit, but stop for amending
#  s, squash = use commit, but meld into previous commit
#  f, fixup = like "squash", but discard this commit's log message
#  x, exec = run command (the rest of the line) using shell
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
----

There's also some useful help text that gets displayed to direct the process. First order of business is to combine all these commits into one. This is done with the `fixup` command, which takes the previous commit and combines it into one, disregarding the commit message:

[source,text]
----
pick 4994dd5 Fixed rvm reinstall/remove ruby not working properly
fixup 618f439 This is a mistake
fixup 67b8cf6 Revert "This is a mistake"
----

The commit message desired is flagged as `reword`, so it can be adjusted:

[source,text]
----
reword 4994dd5 Fixed rvm reinstall/remove ruby not working properly
fixup 618f439 This is a mistake
fixup 67b8cf6 Revert "This is a mistake"
----

Now to save the file which lets the commit be reworded properly:

[source,text]
----
Fixed rvm reinstall/remove ruby not working properly. Addresses issue #1550.

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# Not currently on any branch.
# You are currently editing a commit during a rebase.
#
# Changes to be committed:
#   (use "git reset HEAD^1 <file>..." to unstage)
#
#       modified:   scripts/cli
#
----

This results in the final commit message:

[source,console]
----
$ git rebase -i HEAD~3
[detached HEAD b3d43f3] Fixed rvm reinstall/remove ruby not working properly. Addresses issue #1550.
 1 file changed, 8 insertions(+), 8 deletions(-)
[detached HEAD 0473035] Fixed rvm reinstall/remove ruby not working properly. Addresses issue #1550.
 1 file changed, 8 insertions(+), 8 deletions(-)
Successfully rebased and updated refs/heads/ruby-reinstall.
----

Just to be safe, verify with `git log`:

[source,text]
----
$ git log
commit 04730359a0c59c1240a8535658562aec8dcbb61a
Author: Chris White <cwhite@engineyard.com>
Date:   Tue Feb 19 19:54:54 2013 -0800

    Fixed rvm reinstall/remove ruby not working properly. Addresses issue #1550.

commit 39d46f9659fd846257b3f70cab8e9900e2d7accd
----

That's it. Now all that's left is a single commit with a fixed commit message all in one fatal swoop. Now this is once again a fork that only I work with, so I can make the call to force a remote push:

[NOTE]
As the remote server will question the edits for integrity purposes, `--force` *must* be used

[source,console]
----
$ git push origin ruby-reinstall --force
Counting objects: 7, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (4/4), 491 bytes, done.
Total 4 (delta 3), reused 1 (delta 1)
To git@github.com:cwgem/rvm.git
 + 618f439...0473035 ruby-reinstall -> ruby-reinstall (forced update)
----

This effectively overwrites the remote repository's history as well, merging the commits so that everything looks clean when the pull request is done.

Conclusion
~~~~~~~~~~

While being a useful piece of functionality, `git rebase` should be used with caution when dealing with other people's work. Consider it like proofreading a book, where someone edits paragraphs and sentence structure. Once the book goes out to customers, the proofreader wouldn't visit customers in person to fix an issue they noticed after the fact. Instead they would most likely issue an errata (`git revert` or additional commits). `git rebase` works the same way, "proofreading" commits before publishing them to the public (or internally within an organization). It's definitely a great tool to have in one's git toolbox.
